# Generated by Django 5.2.4 on 2025-08-02 16:29

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('songs', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='song',
            name='acousticness',
            field=models.FloatField(blank=True, help_text='A confidence measure from 0.0 to 1.0 of whether the track is acoustic', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='song',
            name='danceability',
            field=models.FloatField(blank=True, help_text='How suitable a track is for dancing (0.0 to 1.0)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='song',
            name='duration_ms',
            field=models.PositiveIntegerField(blank=True, help_text='The duration of the track in milliseconds', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='energy',
            field=models.FloatField(blank=True, help_text='Energy is a measure from 0.0 to 1.0', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='song',
            name='instrumentalness',
            field=models.FloatField(blank=True, help_text='Predicts whether a track contains no vocals', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='song',
            name='key',
            field=models.IntegerField(blank=True, help_text='The key the track is in (0=C, 1=C#, etc.)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)]),
        ),
        migrations.AddField(
            model_name='song',
            name='liveness',
            field=models.FloatField(blank=True, help_text='Detects the presence of an audience in the recording', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='song',
            name='loudness',
            field=models.FloatField(blank=True, help_text='The overall loudness of a track in decibels', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='mode',
            field=models.IntegerField(blank=True, help_text='Mode indicates the modality (major or minor) of a track', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='song',
            name='num_bars',
            field=models.PositiveIntegerField(blank=True, help_text='Number of bars in the track', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='num_sections',
            field=models.PositiveIntegerField(blank=True, help_text='Number of sections in the track', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='num_segments',
            field=models.PositiveIntegerField(blank=True, help_text='Number of segments in the track', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='song_class',
            field=models.CharField(blank=True, help_text="Classification of the song (e.g., 'rock', 'pop', 'jazz')", max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='tempo',
            field=models.FloatField(blank=True, help_text='The overall estimated tempo of a track in beats per minute (BPM)', null=True),
        ),
        migrations.AddField(
            model_name='song',
            name='time_signature',
            field=models.IntegerField(blank=True, help_text='An estimated time signature of 3/4, 4/4, 5/4, 6/4, 7/4', null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(7)]),
        ),
        migrations.AddField(
            model_name='song',
            name='valence',
            field=models.FloatField(blank=True, help_text='A measure from 0.0 to 1.0 describing the musical positiveness', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddIndex(
            model_name='song',
            index=models.Index(fields=['danceability'], name='songs_song_danceab_4b94ed_idx'),
        ),
        migrations.AddIndex(
            model_name='song',
            index=models.Index(fields=['energy'], name='songs_song_energy_3584bc_idx'),
        ),
        migrations.AddIndex(
            model_name='song',
            index=models.Index(fields=['tempo'], name='songs_song_tempo_f620fa_idx'),
        ),
        migrations.AddIndex(
            model_name='song',
            index=models.Index(fields=['song_class'], name='songs_song_song_cl_09eeda_idx'),
        ),
    ]
