version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:5000"  # Changed to port 8000 as requested
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://songs_user:songs_password@db:5432/songs_db
      - USE_X_FORWARDED_HOST=True
      - USE_X_FORWARDED_PORT=True
    depends_on:
      - redis
      - db
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - ./static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/songs/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:5000 --workers 3 --timeout 120 backend_assignment.wsgi:application"

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Changed to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=songs_db
      - POSTGRES_USER=songs_user
      - POSTGRES_PASSWORD=songs_password
    ports:
      - "5433:5432"  # Changed to avoid conflict with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U songs_user -d songs_db"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
  postgres_data: 